var documenterSearchIndex = {"docs":
[{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"using Forecast\nusing Plots; gr()\nPlots.reset_defaults()\ndefault(size=(800,500))","category":"page"},{"location":"man/examples/whatif/#WHAT-IF-Scenarios","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"","category":"section"},{"location":"man/examples/whatif/#Introduction","page":"WHAT-IF Scenarios","title":"Introduction","text":"","category":"section"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"There are situations in multivaraite analysis in which we want to know things like:","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"How robust is our model to impacts\nHow does our model evolves given known events\nHow does overall accuracy improves in we improve forecast accuracy for specific variables\nHow does our model reacts to different scenarios","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"To answer this quetions an similar ones we need a way to instruct our forecast to test this scenarios.","category":"page"},{"location":"man/examples/whatif/#London-Crime/Weather-Scenarios","page":"WHAT-IF Scenarios","title":"London Crime/Weather Scenarios","text":"","category":"section"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"Let's show how to using the Great London Crime/Weather example. In this example we see how weather temperature affects/explains criminality in Greater London. However, the prediction of temperature is not as accurate as it would be if we use forecast coming from (metoffice)[metoffice.gov.uk] instead those predicted by an AR(1) model. Therefore in order to have more accurate predictions about crime we want to overrule the temperature forecast of the AR(1) model with the forecast comming from metoffice.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"These metoffice predictions would not be much different than those from the AR(1) model therefore, in order to better visualize impacts in the forecast, we will play with an hypothetical scenario in which temperatures increase one degree per month for two years straight.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"Also, let's imagine that the accuracy of the one degree per year scenario is is much better than the one coming for the AR(1) model making its variance 25 times smaller.","category":"page"},{"location":"man/examples/whatif/#Fitting-and-Forecast","page":"WHAT-IF Scenarios","title":"Fitting and Forecast","text":"","category":"section"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"Let's first fit our model and retrieve its forecast. We will be using the scaled forecast to better see how our changes affects the model.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"x = london()\ntx = copy(x)\ntx[!,2:end] = Array(x[:,2:end]) ./   (1. * mapslices(maximum, Array(x[:,2:end]), dims=[1]))\ntx = tx[:,[\"Date\",\"MaxTemp\",\"Violence\",\"Sexual\"]]\n\ndtx = d(tx,1,12) \n\nxar = ar(dtx,1,false)\n\ndϕ1 = xar.Φ\ndϕ2 = copy(dϕ1)\ndϕ2[1,2:3,1] .= 0.0\ndϕ2[3,1,1] = 0.0\ndϕ2[2,3,1] = 0.0\ndΦ = (dϕ1, dϕ2)\nfxar = ar(dtx,1,false; dΦ)\n\ndtfc = forecast(fxar,12*2)\n\nx0 = Array(tx[1:12,2:end])\nx0 = reshape(x0',1,3,12)\ntfc = p(dtfc, x0)\nsetnames!(tfc,[\"MaxTemp / $(maximum(x.MaxTemp))\",\n               \"Violence / $(maximum(x.Violence))\",\n               \"Sexual / $(maximum(x.Sexual))\"])\n\nplot(tfc,title=\"Greater London Crime/Weather Scaled Forecast\")","category":"page"},{"location":"man/examples/whatif/#Scenario-Building","page":"WHAT-IF Scenarios","title":"Scenario Building","text":"","category":"section"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"The last forecast we ran is for tfc, therefore we need to transform as well our what-if scenario to be able to use it.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"# Scenario: starting at 10 C° and increasing one degree per month for two years\nwitemp = vcat(x.MaxTemp, 10 .+ collect(1:2*12)) \nwitemp = witemp ./ maximum(x.MaxTemp) \nwitemp = d(witemp,1,12)[end-12*2+1:end]\n# hide","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"Now we create a DataFrame with the values we want to fix in our scenario","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"fixMean = copy(tfc.mean)\nfixMean[!,3:4] .= missing\nfixMean[!,2] = witemp\n# hide","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"We also fix the Variance matrix with a 25 times smaller variance for MaxTemp and update accordingly its covariance interactions.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"fixΣ2  = copy(dtfc.model.Σ2)\nfixΣ2[1,:] = fixΣ2[1,:]./5\nfixΣ2[:,1] = fixΣ2[:,1]./5\n# hide","category":"page"},{"location":"man/examples/whatif/#Forecasting-Scenario","page":"WHAT-IF Scenarios","title":"Forecasting Scenario","text":"","category":"section"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"Finally we forecast the fxar model with the scenario built previously.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"dtfc = forecast(fxar,12*2; fixMean, fixΣ2)\nplot(dtfc,title=\"Greater London Crime/Weather Scaled Forecast & Fixed MaxTemp\")\n            \nx0 = Array(tx[1:12,2:end])\nx0 = reshape(x0',1,3,12)\ntfc0 = p(dtfc)\ntfc = p(dtfc, x0)\n\n\nsetnames!(tfc,[\"Fixed MaxTemp / $(maximum(x.MaxTemp))\",\n               \"Violence / $(maximum(x.Violence))\",\n               \"Sexual / $(maximum(x.Sexual))\"])\n\nplot(tfc,title=\"Greater London Crime/Weather Scaled Forecast & Fixed MaxTemp\")","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"We can see how our scenario displays a much narrower forecast interval, however the new scenario in the already small covariance does not affect much the intervals for crime.","category":"page"},{"location":"man/examples/whatif/","page":"WHAT-IF Scenarios","title":"WHAT-IF Scenarios","text":"Another noticeable effect would be the inverse relationship between crime and temperature, this is something we can see directly int the AR(1) coefficients but now we can clearly visualize it.","category":"page"},{"location":"man/datasets/#Datasets","page":"Datasets","title":"Datasets","text":"","category":"section"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"Collection of datasets to demostrate the use of Time Series analysis","category":"page"},{"location":"man/datasets/#air","page":"Datasets","title":"air","text":"","category":"section"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"The classic Box & Jenkins airline data. Monthly totals of international airline passengers from 1949 to 1960.","category":"page"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"air","category":"page"},{"location":"man/datasets/#Forecast.air","page":"Datasets","title":"Forecast.air","text":"Package: Forecast\n\nair()\n\nReturn the classic Box & Jenkins airline data. Monthly totals of international airline passengers from 1949 to 1960.\n\nBox, G. E. P., Jenkins, G. M. and Reinsel, G. C. (1976) Time Series Analysis, Forecasting and Control. Third Edition. Holden-Day. Series G.\n\nReturns\n\nDataframe containing the descrived dataset.\n\nExamples\n\njulia> air()\n71×2 DataFrame\n Row │ year        quakes \n     │ Date        Int64  \n─────┼────────────────────\n   1 │ 1950-01-01     138\n   2 │ 1951-01-01     151\n   3 │ 1952-01-01     181\n   [...]\n\n\n\n\n\n","category":"function"},{"location":"man/datasets/#co2","page":"Datasets","title":"co2","text":"","category":"section"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"Atmospheric Carbon Dioxide Dry Air Mole Fractions from quasi-continuous measurements at Mauna Loa, Hawaii.","category":"page"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"co2","category":"page"},{"location":"man/datasets/#Forecast.co2","page":"Datasets","title":"Forecast.co2","text":"Package: Forecast\n\nco2(full = false)\n\nReturn dataset with atmospheric Carbon Dioxide Dry Air Mole Fractions from quasi-continuous measurements at Mauna Loa, Hawaii.\n\nK.W. Thoning, A.M. Crotwell, and J.W. Mund (2020), Atmospheric Carbon Dioxide Dry Air Mole Fractions from continuous measurements at Mauna Loa, Hawaii, Barrow, Alaska, American Samoa and South Pole. 1973-2019, Version 2020-08 National Oceanic and Atmospheric Administration (NOAA), Global Monitoring Laboratory (GML), Boulder, Colorado, USA https://doi.org/10.15138/yaf1-bk21 FTP path: ftp://aftp.cmdl.noaa.gov/data/greenhouse_gases/co2/in-situ/surface/\n\nArguments\n\nfull: if true Returns the full original dataset from 1973 to 2020 in a DataFrame, otherwise returns the subset used in \"STL: A Seasonal-Trend Decomposition Procedure Based on Loess\" from Cleveland et. al. Its default value is false.\n\nReturns\n\nDataframe containing the descrived dataset.\n\nExamples\n\njulia> co2()\n[ Info: Dataset used in Cleveland et al. paper\n4612×2 DataFrame\n  Row │ date        co2        \n      │ Date        Float64?   \n──────┼────────────────────────\n    1 │ 1974-05-17      333.38\n    2 │ 1974-05-18      333.11\n    3 │ 1974-05-19      333.46\n   [...]\n\n\n\n\n\n","category":"function"},{"location":"man/datasets/#quakes","page":"Datasets","title":"quakes","text":"","category":"section"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"Number of earthquakes per year on earth with a magnitude higher or equal to six from 1950 to 2020.","category":"page"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"quakes","category":"page"},{"location":"man/datasets/#Forecast.quakes","page":"Datasets","title":"Forecast.quakes","text":"Package: Forecast\n\nquakes()\n\nReturn the number of earthquakes per year on earth with a magnitude higher or equal to six from 1950 to 2020. The data has been collected from https://earthquake.usgs.gov/ and aggregated.\n\nExamples\n\njulia> quakes()\n71×2 DataFrame\n Row │ year        quakes \n     │ Date        Int64  \n─────┼────────────────────\n   1 │ 1950-01-01     138\n   2 │ 1951-01-01     151\n   3 │ 1952-01-01     181\n   [...]\n\n\n\n\n\n","category":"function"},{"location":"man/datasets/#seaborne","page":"Datasets","title":"seaborne","text":"","category":"section"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"Estimates of world seaborne trade from AIS data collected by MarineTraffic; available at UN COMTRADE Monitor.","category":"page"},{"location":"man/datasets/","page":"Datasets","title":"Datasets","text":"seaborne","category":"page"},{"location":"man/datasets/#Forecast.seaborne","page":"Datasets","title":"Forecast.seaborne","text":"Package: Forecast\n\nseaborne(full = false)\n\nReturn estimates of world seaborne trade from AIS data collected by Marine Traffic.\n\nBy default a DataFrame containing deadweight imports for France, Germany and the United Kingdom from 2015-04-01 to 2021-05-02 is returned, otherwise a DataFrame is returned for the same countries with import and exports for the below fields:\n\nnumpc:     number of port calls mtc:        metric tons of cargo dwt:        deadweight tonnage suffixma:  30-day moving averages\n\nData available at UN COMTRADE Monitor.Cerdeiro, Komaromi, Liu and Saeed (2020). \n\nReturns\n\nDataframe containing the seaborne dataset.\n\nExamples\n\njulia> seaborne()\n[ Info: Seaborne deadweight trade imports from AIS\n2199×4 DataFrame\n  Row │ Date        France   Germany  UK     \n      │ Date        Int64    Int64    Int64  \n──────┼──────────────────────────────────────\n    1 │ 2015-04-01   507946   878377  599573\n    2 │ 2015-04-02   332043  1501614  772714\n    3 │ 2015-04-03   810077   941663  262994\n   [...]\n\n\n\n\n\n","category":"function"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"using Forecast\nusing Plots; gr()\nPlots.reset_defaults()\ndefault(size=(800,500))\nusing PrettyTables","category":"page"},{"location":"man/examples/london/#London-Weather/Crime-(Multivariate)","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"","category":"section"},{"location":"man/examples/london/#Introduction","page":"London Weather/Crime (Multivariate)","title":"Introduction","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"In this example we will study the relationship between weather and crime in in Greater London. In particular we will be considering ten years of monthly data about weather and crime in Greater London from 2008 to 2018.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"x = london()\nplot(x)","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"The variables at play will be:","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"MaxTemp:  Monthly data for the mean daily maximum temperature in C° for each month.\nViolence: Violent crimes comprising; Assault with Injury, Common Assault, Grievous Bodily Harm, Harassment, Murder, Offensive Weapon, Other violence, Wounding/GBH\nSexual: Rape, Other sexual crimes.","category":"page"},{"location":"man/examples/london/#Descriptive-Analysis","page":"London Weather/Crime (Multivariate)","title":"Descriptive Analysis","text":"","category":"section"},{"location":"man/examples/london/#Seasonality","page":"London Weather/Crime (Multivariate)","title":"Seasonality","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"splot(x[:,[\"Date\",\"MaxTemp\"]], title=\"Seasonal Maximum Temperature\")","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"splot(x[:,[\"Date\",\"Violence\"]], title=\"Seasonal Violent Crimes\")","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"splot(x[:,[\"Date\",\"Sexual\"]], title=\"Seasonal Sexual Crimes\")","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"Sesonality patterns for MaxTemp are obvious and noticeable for Violence, however there's barely any to be seen in Sexual.","category":"page"},{"location":"man/examples/london/#Normalization","page":"London Weather/Crime (Multivariate)","title":"Normalization","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"To compare time series with different positive magnitudes and to facilitate an stationary forecasting we will normalize data by dividing each variable by its maximum value.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"tx = copy(x)\ntx[!,2:end] = Array(x[:,2:end]) ./   (1. * mapslices(maximum, Array(x[:,2:end]), dims=[1]))\ntx = tx[:,[\"Date\",\"MaxTemp\",\"Violence\",\"Sexual\"]]\n# hide","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"To achieve an stationary time series to start our analysis we need to differentiate MaxTemp with a lag of 12, however this might not be enough for Violence and Sexual since they also show a marked trend from 2013 onwards.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"dtx = d(tx,1,12) \nplot(dtx)","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"An extra differentation might be required for Violence and Sexual but this seems to be one to many for MaxTemp indicated by an increase in its variance when doing so. Also, the apparent need for a differentation in Violence and Sexual seems to be a temporary effect rather than a permanent trend or seasonality therefore we will continue with just one differentation of order 12.","category":"page"},{"location":"man/examples/london/#Fitting-an-AR(1)-model","page":"London Weather/Crime (Multivariate)","title":"Fitting an AR(1) model","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"Given the scarcity of data for a multivariate model we cannot fit too many parameters while keeping its significance. We will therefore fit an AR of order one.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"xar = ar(dtx,1,false)\nshow(xar) # hide","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"The first thing we can do is to use Φ1 to infer directional causality, in this case we see how MaxTemp is not influenced at all (with statistical significance) by Violence and Sexual, which could not possibly be otherwise in this case. On the other hand we have Violence and Sexual being affected significantly by MaxTemp.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"The relathionship between Violence and Sexual is both ways, however, the effect Sexual has on Violence is small and barely significant which might prompt us to consider to remove it altogether, the opposite though is not true, Violence has a strong and significant influence in Sexual.","category":"page"},{"location":"man/examples/london/#Fixing-Coefficients","page":"London Weather/Crime (Multivariate)","title":"Fixing Coefficients","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"Let's now fix to 0 the influcence of Violence and Sexual on MaxTemp, remove the influence from MaxTemp on Sexual since it is accounted for via Violence and the non-significant influence of Sexual on Violence. If now we fit again the model we have","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"dϕ1 = xar.Φ\ndϕ2 = copy(dϕ1)\ndϕ2[1,2:3,1] .= 0.0\ndϕ2[3,1,1] = 0.0\ndϕ2[2,3,1] = 0.0\ndΦ = (dϕ1, dϕ2)\nfxar = ar(dtx,1,false; dΦ)\nshow(fxar) # hide","category":"page"},{"location":"man/examples/london/#Transformed-Forecasting","page":"London Weather/Crime (Multivariate)","title":"Transformed Forecasting","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"Next we can see the two years forecast for the transformed dataset.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"dtfc = forecast(fxar,12*2)\nplot(dtfc)","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"In order to obtain a forecast for the original data we need to invert the transformations carried out previously.","category":"page"},{"location":"man/examples/london/#Scaled-Forecasting","page":"London Weather/Crime (Multivariate)","title":"Scaled Forecasting","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"Next we can see the two years forecast for the scaled dataset.","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"x0 = Array(tx[1:12,2:end])\nx0 = reshape(x0',1,3,12)\ntfc = p(dtfc, x0)\nsetnames!(tfc,[\"MaxTemp / $(maximum(x.MaxTemp))\",\n               \"Violence / $(maximum(x.Violence))\",\n               \"Sexual / $(maximum(x.Sexual))\"])\nplot(tfc,title=\"Greater London Crime/Weather Scaled Forecast\")","category":"page"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"The two years forecast follows:","category":"page"},{"location":"man/examples/london/#Final-Forecast","page":"London Weather/Crime (Multivariate)","title":"Final Forecast","text":"","category":"section"},{"location":"man/examples/london/","page":"London Weather/Crime (Multivariate)","title":"London Weather/Crime (Multivariate)","text":"fc = transform(tfc,(v->v*maximum(x.MaxTemp)),1);\nfc = transform(fc,(v->round(v*maximum(x.Violence))),2)\nfc = transform(fc,(v->round(v*maximum(x.Sexual))),3)\nsetnames!(fc,[\"MaxTemp\",\"Violence\",\"Sexual\"])\n\nfc.mean","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"using Forecast\nusing Plots; gr()\nPlots.reset_defaults()\ndefault(size=(800,500))","category":"page"},{"location":"man/examples/quakes/#Quakes-(Univariate)","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"","category":"section"},{"location":"man/examples/quakes/#Introduction","page":"Quakes (Univariate)","title":"Introduction","text":"","category":"section"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"In this example we will predict the of number of earthquakes per year with a magnitude higher or equal to six. The data for the analysis has been collected from USGS and aggregated from 1950 to 2020.","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"plot(quakes()) #hide","category":"page"},{"location":"man/examples/quakes/#Descriptive-Analysis","page":"Quakes (Univariate)","title":"Descriptive Analysis","text":"","category":"section"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"First let's use a few utilities contained in the Forecast package to have a first impression on the data:","category":"page"},{"location":"man/examples/quakes/#Numerical-Summary","page":"Quakes (Univariate)","title":"Numerical Summary","text":"","category":"section"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"qk = quakes()\nsqk = summarize(qk)\nshow(sqk) # hide","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"Data's behavior seems to follow a Normal distribution with no strong indications of seasonal patterns in its plot.","category":"page"},{"location":"man/examples/quakes/#Autoregressive-Behavior","page":"Quakes (Univariate)","title":"Autoregressive Behavior","text":"","category":"section"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"plot(pacf(qk.quakes))","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"The partial autoregression function shows us that there seems to be a significant correlation to the number of earthquakes taking place last year. If we were looking for seasonality we could check on periods of 11 or 15 years since they show a nearly significant correlations but since they're most likely spureous (...or are they?) we will ignore them in this analysis.","category":"page"},{"location":"man/examples/quakes/#Fitting-an-AR-Model","page":"Quakes (Univariate)","title":"Fitting an AR Model","text":"","category":"section"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"ar_qk = ar(qk)\nshow(ar_qk) # hide","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"In the AR model of order one we have highly significant coefficients and increasing its order does not provide important changes in the Information Criteria, however, the residuals show a barely significant normality behavior and we may consider to transform our data to improve on that.  Given tha large noise in the model, tranformations to improve results will not be dramatic and therefore we will continue with a simple AR model of order one for our forecasting.","category":"page"},{"location":"man/examples/quakes/#Forecasting-Earthquakes","page":"Quakes (Univariate)","title":"Forecasting Earthquakes","text":"","category":"section"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"fc_qk = forecast(ar_qk,10);\nplot(fc_qk)","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"The plot shows us the forecast for the next ten years and, as we see, the large noise in the model does not allow us to be very accurate in our forecasting, but at least we can confidently say that there is a resonable chance to have a larger number of big earthquakes in 2021 and 2022 than the number we had in 2020.","category":"page"},{"location":"man/examples/quakes/","page":"Quakes (Univariate)","title":"Quakes (Univariate)","text":"show(fc_qk) # hide","category":"page"},{"location":"man/docstrings/#Docstrings","page":"Docstrings","title":"Docstrings","text":"","category":"section"},{"location":"man/docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [Forecast]","category":"page"},{"location":"man/docstrings/#Forecast.Forecast","page":"Docstrings","title":"Forecast.Forecast","text":"Collection of methods for Time Series analysis\n\nFeatured Methods:\n\nacf:        Auto-correlation or auto-covariance of univariate series. \nar:         Multivariate Autoregressive Model.\narsim:      Simulated Multivariate Autoregressive Model.\nboxcox:     Box-Cox Transformations.\nccf:        Cross-correlation or cros-covariance of two univariate series.\nd:          Lagged differences of a given order for Vector and Array.\nforecast:   Forecast values of fitted time series models.\nhma:        Henderson moving average filter.\niboxcox:    Inverse Box-Cox Transformations.\nloess:      Locally estimated scatterplot smoothing.\np:          Reverse lagged differences of a given order for types Vector and Array.\npacf:       Partial Auto-correlation function.\nsma:        Simple moving average.\nsplot:      Plot a seasonal plot for types Vector and TimeArray.\nstl:        Seasonal and Trend decomposition using loess.\nsummarize:  Statistical summary.\n\n\n\n\n\n","category":"module"},{"location":"man/docstrings/#Forecast.AR","page":"Docstrings","title":"Forecast.AR","text":"Package: Forecast\n\nStore results from the function ar\n\nArguments\n\nvarnames        List of variable names Φ               Collection of d by d matrices of coefficients coefficients    Alias for Φ Φ0              Constant constant        Alias for Φ0 Σ2              ML variance/covariance Matrix variance        Alias for Σ2 Σ               Variables Standard deviation  stdev           Alias for Σ x               Original dataset fitted          Fitted values residuals       Prediction Error ic::Dict        Collection of Information Criteria stats::Dict     Collection of Statistics Φse             Parameters Standard Error pse             Alias for Φse Φ0se            Constant Standard Error p0se            Alias for Φ0se Φpv             p-value for Parameters ppv             Alias for Φpv Φ0pv            p-value for Constant p0pv            Alias for Φ0pv call::String    Method called to generate AR\n\n\n\n\n\n","category":"type"},{"location":"man/docstrings/#Forecast.CCF","page":"Docstrings","title":"Forecast.CCF","text":"Package: Forecast\n\nStore results from the functions acf, ccf and pacf\n\nArguments\n\nccf::AbstractArray    An array with results from ccf, acf and pacf N::Integer            Length of ccf type::String          Type of CCF lag::Integer          Maximum number of lags alpha::Tupl e         CI thresholds ci::Tuple             CI for the alpha auto::Bool            Auto-correlation call::String          Method called to generate ccf\n\n\n\n\n\n","category":"type"},{"location":"man/docstrings/#Forecast.FORECAST","page":"Docstrings","title":"Forecast.FORECAST","text":"Package: Forecast\n\nStore results from the function forecast\n\nArguments\n\nmodel:  Model object containing information about the fitted model.    x:      Original time series.    alpha:  The confidence levels associated with the prediction intervals.    mean:   Point forecasts.    lower:  Lower limits for prediction intervals.    upper:  Upper limits for prediction intervals.    se:     Standard Error.\n\n\n\n\n\n","category":"type"},{"location":"man/docstrings/#Forecast.STL","page":"Docstrings","title":"Forecast.STL","text":"Package: Forecast\n\nStore results from the function stl\n\nArguments\n\n`decomposition::DataFrame`    A time array with three time series from a fitted STL model\n`call::String`                method called to generate ta\n\n\n\n\n\n","category":"type"},{"location":"man/docstrings/#Forecast.SUMMARIZE","page":"Docstrings","title":"Forecast.SUMMARIZE","text":"Package: Forecast\n\nStore results from the function summarize\n\nArguments\n\nquantiles::DataFrame        DataFrame with the data quantiles for each column moment::DataFrame           DataFrame with the first four moments for each column format::DataFrame           DataFrame with number of types per column\n\n\n\n\n\n","category":"type"},{"location":"man/docstrings/#Forecast.acf-Tuple{DataFrames.DataFrame}","page":"Docstrings","title":"Forecast.acf","text":"Package: Forecast\n\nacf(x::{AbstractVector,DataFrame},\n    type = \"cor\",\n    lag = Integer(ceil(10*log10(length(x)))),\n    alpha = (0.95,0.99))\n\nCompute the auto-correlation or auto-covariance for an univariate series.\n\nThe results are normalized to preserve homoscedasticity. The distribution used to normalize the data is an approximation of a Fisher Transformation via a Normal Distribution. There is a plot recipe for the returned object, if the type is cor the plot will also show confidence intervals for the given alpha values.\n\nArguments\n\nx: Vector or uni-dimensional DataFrame of data.\ntype: Valid values are \"cor\" for correlation (default) and \"cov\" for convariance.\nlag: Maximum number of lags.\nalpha: A tuple with two thresholds (t1,t2) with t1 <= t2 to plot confidence intervals. The default values are 0.95 and 0.99.\n\nReturns\n\nA CCF object.\n\nExamples\n\njulia> x = rand(100);\nres = acf(x; type=\"cor\");\nplot(res)\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.air-Tuple{}","page":"Docstrings","title":"Forecast.air","text":"Package: Forecast\n\nair()\n\nReturn the classic Box & Jenkins airline data. Monthly totals of international airline passengers from 1949 to 1960.\n\nBox, G. E. P., Jenkins, G. M. and Reinsel, G. C. (1976) Time Series Analysis, Forecasting and Control. Third Edition. Holden-Day. Series G.\n\nReturns\n\nDataframe containing the descrived dataset.\n\nExamples\n\njulia> air()\n71×2 DataFrame\n Row │ year        quakes \n     │ Date        Int64  \n─────┼────────────────────\n   1 │ 1950-01-01     138\n   2 │ 1951-01-01     151\n   3 │ 1952-01-01     181\n   [...]\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.ar","page":"Docstrings","title":"Forecast.ar","text":"Package: Forecast\n\nar(x::DataFrame, or, constant = true;             \n                 alpha = 1.0, dΦ0 = nothing, dΦ = nothing)\n\nar(x::AbstractArray, or, constant = true; \n                     alpha = false, dΦ0 = nothing, dΦ = nothing, varnames = nothing)\n\nFit a multivariate autoregressive series model.\n\nThe fitting is done via Ordinary Least Squared and implements the following model:\n\nXt = Phi_0 + sum_i=1^p Phi_i cdot X_t-i + mathcalN(vec0Sigma)\n\nArguments\n\nx: Multivariate series each column containing a dimension and ordered by time ascending rows.\nor: Number of parameters Φ to be estimated.\nconstant: If true ar estimates Φ0 otherwise it is assume to be zero.\nalpha: fixes to zero all coefficients which significance is below its value. It defaults to one.\ndΦ0: Tuple containing two Φ0 objects, the first one will act as an original reference to the second one and different values will be fixed in the fitting process to the values in the second Φ0.\ndΦ:  Equivalent to dΦ0 but for Φ.\nvarnames: Names of the dimensions (by default xi where i is an integer)\n\nReturns\n\nAn AR object containing the model coefficients, the error sigma matrix, residuals and a collection of information criteria\n\nExamples\n\n```julia-repl julia> ar(rand(100,2),2) AR([...])\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.arsim-Tuple{AR, Integer}","page":"Docstrings","title":"Forecast.arsim","text":"Package: Forecast\n\narsim(Φ,Φ0,x0,n; Σ,E,fix)\narsim(AR,n;fix)\n\nSimulate a multivariate autoregressive series model.\n\nThe simulated series follows the model:\n\nXt = Phi_0 + sum_i=1^p Phi_i cdot X_t-i + E\n\nArguments\n\nAR:           AR struct coming from an ar model.\nΦ:            Array with dimensions (m,m,p) for the parameters in the AR model.\nΦ0:           Vector size m for the constant in the AR model. Default value is 0.\nx0:           Array with dimensions (m,p) for the initial value in the AR model. Default value is a random value from zero to one.\nn:            Number of simulations.\nfix:          Matrix{Union{Missing,Float64}} containing values to be fixed in th simulation.\nΣ2:           Variance Covariance matrix for the AR model with a MvNormal distribution for the noise. Default value is an identity Matrix.\nE:            Distribution for the error.\n\nReturns\n\nA multivariate series simulating an AR model each column containing a dimension and ordered by time ascending rows.\n\nExamples\n\n```julia-repl julia> arsim(1,1,1,10) 10-element Vector{Float64,1}: [...]\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.boxcox-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Docstrings","title":"Forecast.boxcox","text":"Package: Forecast\n\nboxcox(x::Vector)\nboxcox(x::Vector, λ::Float64)  \nboxcox(x::Vector, λ::Vector)\n\nCompute a Box-Cox power transformation given λ or (λ1,λ2) for data containing negative values, or compute an optimal power transformation if no λ or (λ1,λ2) is provided.\n\nx(lambda) =\nbegincases\n dfracx_i^lambda - 1lambda  textif  lambda neq 0 \n ln x_i  textif  lambda = 0\nendcases\n\nfor negative values\n\nx(boldsymbollambda) =\nbegincases\n dfrac(x_i + lambda_2)^lambda_1 - 1lambda_1  textif  lambda_1 neq 0 \n ln (x_i + lambda_2)  textif  lambda_1 = 0\nendcases \n\nArguments\n\nx: Vector to be transformed.\nλ: Exponent/s for the tranformation\n\nReturns\n\nA vector with a boxcox tarnsformation for x or a Dict with :x boxcox tranformed and the optimal :λ\n\nReference\n\nBox, G. E. P. and Cox, D. R. (1964). An analysis of transformations, Journal of the Royal Statistical Society, Series B, 26, 211-252. A\n\nExamples\n\njulia> x = rand(100)\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\njulia> x = rand(100) .- 0.5\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.ccf-Tuple{DataFrames.DataFrame, DataFrames.DataFrame}","page":"Docstrings","title":"Forecast.ccf","text":"Package: Forecast\n\nccf(x1::{AbstractVector,DataFrame},\n    x2::{AbstractVector,DataFrame};\n    type = \"cor\",\n    lag = Integer(ceil(10*log10(length(x1)))),\n    alpha = (0.95,0.99))\n\nCompute the cross-correlation or cros-covariance of two univariate series.\n\nThe results are normalized to preserve homoscedasticity. The distribution used to normalize the data is an approximation of a Fisher Transformation via a Normal Distribution. There is a plot recipe for the returned object, if the type is cor the plot will also show confidence intervals for the given alpha values.\n\nIf, for a given integer k, x2 repeats x1 values such that x1[t] = x2[t+k] for all i then high correlation value will be placed at the right from the center in the results. That is, this convention will be represented in the plots as x1_t = x2_{t+k} -> _____0__k__ meaning x2 behavior can be predicted by x1 in k units.\n\nArguments\n\nx1: Vector or uni-dimensional DataFrame of data.\nx2: Vector or uni-dimensional DataFrame of data.\ntype: Valid values are \"cor\" for correlation (default) and \"cov\" for convariance.\nlag: Maximum number of lags.\nalpha: A tuple with two thresholds (t1,t2) with t1 <= t2 to plot confidence intervals. The default values are 0.95 and 0.99.\n\nReturns\n\nA CCF object. \n\nExamples\n\njulia> x1 = rand(100);\nx2 = circshift(x1,6);\nres = ccf(x1, x2; type=\"cor\");\nplot(res)\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.co2","page":"Docstrings","title":"Forecast.co2","text":"Package: Forecast\n\nco2(full = false)\n\nReturn dataset with atmospheric Carbon Dioxide Dry Air Mole Fractions from quasi-continuous measurements at Mauna Loa, Hawaii.\n\nK.W. Thoning, A.M. Crotwell, and J.W. Mund (2020), Atmospheric Carbon Dioxide Dry Air Mole Fractions from continuous measurements at Mauna Loa, Hawaii, Barrow, Alaska, American Samoa and South Pole. 1973-2019, Version 2020-08 National Oceanic and Atmospheric Administration (NOAA), Global Monitoring Laboratory (GML), Boulder, Colorado, USA https://doi.org/10.15138/yaf1-bk21 FTP path: ftp://aftp.cmdl.noaa.gov/data/greenhouse_gases/co2/in-situ/surface/\n\nArguments\n\nfull: if true Returns the full original dataset from 1973 to 2020 in a DataFrame, otherwise returns the subset used in \"STL: A Seasonal-Trend Decomposition Procedure Based on Loess\" from Cleveland et. al. Its default value is false.\n\nReturns\n\nDataframe containing the descrived dataset.\n\nExamples\n\njulia> co2()\n[ Info: Dataset used in Cleveland et al. paper\n4612×2 DataFrame\n  Row │ date        co2        \n      │ Date        Float64?   \n──────┼────────────────────────\n    1 │ 1974-05-17      333.38\n    2 │ 1974-05-18      333.11\n    3 │ 1974-05-19      333.46\n   [...]\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.compact-Tuple{Number}","page":"Docstrings","title":"Forecast.compact","text":"Package: Forecast\n\ncompact(x)\n\nStandarize input by dropping empty dimensions and returning either a Number or an Array. In the case of a DataFrame it removes all non Real columns except if there are columns  with Date type in which case keeps the first one found and places it as the first column.\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.d","page":"Docstrings","title":"Forecast.d","text":"Package: Forecast\n\nfunction d(x::{AbstractVector,AbstractArray,DataFrame},\n           or::Int=1,\n           la::Int=1;\n           center::Bool=false)\n\nReturn Laged differences of a given or for Vector, Array and TimeSeries.\n\nArguments\n\nx: Vector or Array of data.\nor: Order of the differences; number of recursive iterations on the same vector/array.\nla: Lag for the difference.\ncenter: Center the result in the response using Missing values.\n\nReturns\n\nLaged differences Vector or Array of a given order.\n\nExamples\n\njulia> x = [1,2,3,4,5];\njulia> d(x)\n d(x)\n4-element Vector{Int64}:\n 1\n 1\n 1\n 1\n\njulia> d(x,2)\n3-element Vector{Int64}:\n 0\n 0\n 0\n\n\njulia> d(x,1,2)\n3-element Vector{Int64}:\n 2\n 2\n 2\n\njulia> x = reshape(collect(1:20),10,2);\n\njulia> d(x,2,2)\n6×2 Matrix{Int64}:\n 0  0\n 0  0\n 0  0\n 0  0\n 0  0\n 0  0\n\njulia> d(d(x,1,2),1,2) == d(x,2,2)\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.drop-Tuple{AbstractMatrix{T} where T}","page":"Docstrings","title":"Forecast.drop","text":"Package: Forecast\n\ndrop(M;r,c)\n\nDrop rows and columns from a matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.fixW-NTuple{4, Any}","page":"Docstrings","title":"Forecast.fixW","text":"Package: Forecast\n\nfixW(W,dΦ0,dΦ)\n\nFor a given Weight matrix returns a version with fixed values xbased on dΦ0 and dΦ\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.fixnp-Tuple{Any, Any}","page":"Docstrings","title":"Forecast.fixnp","text":"Package: Forecast\n\nfixnp(dΦ0,dΦ)\n\nreturn the number of free parameters\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.fixΦ-NTuple{5, Any}","page":"Docstrings","title":"Forecast.fixΦ","text":"Package: Forecast\n\nfixΦ(X,Y,dΦ0,dΦ)\n\nFor a given X and Y OLS matrices returns the X and Y resulting from fixing parameters given dΦ0 and dΦ\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.fixΦse-Tuple{Any, Any, Any}","page":"Docstrings","title":"Forecast.fixΦse","text":"Package: Forecast\n\nfixΦse(M,dΦ0,dΦ)\n\nFor a given SE matrix returns an version with zeroes based on dΦ0 and dΦ\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.forecast-Tuple{AR, Integer}","page":"Docstrings","title":"Forecast.forecast","text":"Package: Forecast\n\nforecast(xar, n; levels = (0.8,.95))\n\nForecast a univariate or multivariate autoregressive model.\n\nThe forecasting follows the model:\n\nXt = Phi_0 + sum_i=1^p Phi_i cdot X_t-i + E\n\nArguments\n\nxar           AR struct coming from the ar function. n             Number of time periods to be forecasted. alpha         Prediction intervals levels; its default value is (0.8, 0.95) fixMean       Fixes the mean in the forecast with Matrix{Union{Missing,Float64}}. Default value sis nothing. fixΣ2         fixes Σ2 values in the forecast\n\nReturns\n\nA FORECAST struct\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.fvar-Tuple{Any, Any, Any}","page":"Docstrings","title":"Forecast.fvar","text":"Forecast recursive variance/covariance\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.hma-Tuple{AbstractArray{var\"#s46\", N} where {var\"#s46\"<:Number, N}, Int64}","page":"Docstrings","title":"Forecast.hma","text":"Package: Forecast\n\nhma(s, n)\n\nApplies the Henderson moving average filter to dataset s with n-term.\n\nInformation about involved processes and application can be found at the following:\n\n(\"Time Series Analysis: The Process of Seasonal Adjustment\")[https://www.abs.gov.au/websitedbs/d3310114.nsf/4a256353001af3ed4b2562bb00121564/5fc845406def2c3dca256ce100188f8e!OpenDocument] Australian Bureau of Statistics\n\nArguments\n\ns: Observations' support.\nn: Observation values.\n\nReturns\n\nAn array of Henderson filter smoothed values provided in s.\n\nExamples\n\njulia> hma(rand(24), 13)\n24-element Array{Float64,1}:\n[...]\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.iboxcox-Tuple{AbstractVector{var\"#s46\"} where var\"#s46\"<:Real, Real}","page":"Docstrings","title":"Forecast.iboxcox","text":"Package: Forecast\n\niboxcox(x::Vector, λ::Float64) \niboxcox(x::Vector, λ::Vector)\n\nCompute the inverse transformation of a Box-Cox power transformation given λ.\n\nArguments\n\nx: Vector with a boxcox tranformation to be inverted.\nλ: Exponent for the inverse tranformation.\n\nReturns\n\nA vector with witht the inverse transformation of x given λ.\n\nReference\n\nBox, G. E. P. and Cox, D. R. (1964). An analysis of transformations, Journal of the Royal Statistical Society, Series B, 26, 211-252. A\n\nExamples\n\njulia> x = rand(100)\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\njulia> x = rand(100) .- 0.5\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.insert_column","page":"Docstrings","title":"Forecast.insert_column","text":"Package: Forecast\n\ninsert_column(M, at, value = 0.0)\n\nInsert a column with specific value at a given position, values are pushed to the right\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.insert_cross","page":"Docstrings","title":"Forecast.insert_cross","text":"Package: Forecast\n\ninsert_row(M, at, value = 0.0)\n\nInsert a row and a column with specific value at a given cross position,  values are pushed right and down.\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.insert_row","page":"Docstrings","title":"Forecast.insert_row","text":"Package: Forecast\n\ninsert_row(M, at, value = 0.0)\n\nInsert a row with specific value at a given position, values are pushed down\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.loess-Union{Tuple{V}, Tuple{T}, Tuple{S}, Tuple{R}, Tuple{AbstractVector{R}, AbstractVector{var\"#s33\"} where var\"#s33\"<:Union{Missing, S}}} where {R<:Real, S<:Real, T<:Real, V<:Real}","page":"Docstrings","title":"Forecast.loess","text":"Package: Forecast\n\nloess(xv, yv;\n      d = 2,\n      q = Int64(round(3/4*length(xv))),\n      rho = repeat([1.0],inner=length(xv)),  \n      predict = xv)\n\nSmooth a vector of observations using locally weighted regressions.\n\nAlthough loess can be used to smooth observations for any given number of independent variables, this implementation is univariate. The speed of loess can be greatly increased by using fast aproximations for the linear fitting calculations, however this implementation calculates only exact results.\n\nThe loess functionality and nomenclature follows the descriptions in:\n\n\"STL: A Seasonal, Trend Decomposition Procedure Based on Loess\" Robert B. Cleveland, William S. Cleveland, Jean E. McRae, and Irma Terpenning. Journal of Official Statistics Vol. 6. No. 1, 1990, pp. 3-73 (c) Statistics Sweden.\n\nArguments\n\nxv: Observations' support.\nyv: Observation values.\nd: Degree of the linear fit, it accepts values 1 or 2.\nq: As q increases loess becomes smoother, when q tends to infinity loess tends to an ordinary least square poynomial fit of degree d. It defaults to the rounding of 3/4 of xv's length.\nrho: Weights expressing the reliability of the observations (e.g. if yi had variances σ^2*ki where ki where known, the rhoi could be 1/ki). It defaults to 1.0.\npredict: Vector containing the real values to be predicted, by default predicts xv.\n\nReturns\n\nThe loess values for the values contained in predict.\n\nExamples\n\njulia> loess(rand(5), rand(5); predict=rand(10))\n10-element Array{Float64,1}:\n[...]\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.london-Tuple{}","page":"Docstrings","title":"Forecast.london","text":"Package: Forecast\n\nlondon()\n\nReturn ten years of monthly data about weather and crime in Greater London from 2008 to 2018.\n\nData has been collected and joined from london.gov.uk and metoffice.gov.uk (Heathrow Station).\n\nWeather Variables\n\nMaxTemp:  Mean daily maximum temperature in C°\nMinTemp:  Mean daily minimum temperature in C°\nAirFrost: Days of air frost\nRain:     Total rainfall in mm\nSun:      Total sunshine durationin hours\n\nCrime Variables and its aggregated categories\n\n┌─────────────────────────────┬────────────────────────────────────────┐\n│                       Crime │                               Category │\n├─────────────────────────────┼────────────────────────────────────────┤\n│                    Burglary │            Burglary in Other Buildings │\n│                             │                 Burglary in a Dwelling │\n│                      Damage │            Criminal Damage To Dwelling │\n│                             │       Criminal Damage To Motor Vehicle │\n│                             │      Criminal Damage To Other Building │\n│                             │                  Other Criminal Damage │\n│                       Drugs │                       Drug Trafficking │\n│                             │                            Other Drugs │\n│                             │                    Possession Of Drugs │\n│                       Fraud │                     Counted per Victim │\n│                             │                  Other Fraud & Forgery │\n│                       Other │                         Going Equipped │\n│                             │                       Other Notifiable │\n│                     Robbery │                      Business Property │\n│                             │                      Personal Property │\n│                      Sexual │                           Other Sexual │\n│                             │                                   Rape │\n│                       Theft │                  Handling Stolen Goods │\n│                             │ Motor Vehicle Interference & Tampering │\n│                             │                            Other Theft │\n│                             │                     Other Theft Person │\n│                             │               Theft From Motor Vehicle │\n│                             │                       Theft From Shops │\n│                             │          Theft/Taking Of Motor Vehicle │\n│                             │            Theft/Taking of Pedal Cycle │\n│                    Violence │                    Assault with Injury │\n│                             │                         Common Assault │\n│                             │                   Grievous Bodily Harm │\n│                             │                             Harassment │\n│                             │                                 Murder │\n│                             │                       Offensive Weapon │\n│                             │                         Other violence │\n│                             │                           Wounding/GBH │\n└─────────────────────────────┴────────────────────────────────────────┘\n\nReturns\n\nDataframe containing the descrived dataset.\n\nExamples\n\njulia> london()\n132×15 DataFrame\n Row │ Date        MaxTemp  MinTemp  AirFrost  \n     │ Date        Float64  Float64  Int64     \n─────┼─────────────────────────────────────────[...]\n   1 │ 2008-01-01     10.4      4.7         0  \n   2 │ 2008-02-01     11.0      2.0         7  \n   3 │ 2008-03-01     10.6      3.7         2\n   [...]\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.nextodd-Tuple{Real}","page":"Docstrings","title":"Forecast.nextodd","text":"Package: Forecast\n\nnextodd(x)\n\nReturn the smallest odd integer greater than or equal to x.        \n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.p","page":"Docstrings","title":"Forecast.p","text":"Package: Forecast\n\nfunction p(dx, x0)\n\nReturn reverse lagged differences of a given order for Vector, Array and DataFrame.\n\nArguments\n\ndx: Array or DataFrame of data.\nx0: Initial constants the reverse difference. The default value represents an integration of order one and lag one with initial values at zero. The format for the initial values is Array{Real,3}(order, variable, lag)\"\n\nReturns\n\nLagged differences Vector or Array of a given order.\n\nExamples\n\n\n# Order two with Lag two\njulia> x = repeat(1:2,30);\njulia> dx = d(x,2,2);\njulia> x0 = zeros(2,1,2); # lag 2, 1 variable, order 1\njulia> x0[1,:,:] = collect(1:2);\njulia> p(dx,x0) ≈ x\ntrue\n\n# Calculation of π\njulia> x = 0:0.001:1;\njulia> y = sqrt.(1 .- x.^2);\njulia> isapprox(4*p(y)[end]/1000 , π, atol = 0.01)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.pacf","page":"Docstrings","title":"Forecast.pacf","text":"Package: Forecast\n\npacf(x::{AbstractVector,DataFrame};\n     type = \"step-real\",\n     lag = Integer(ceil(10*log10(length(x)))),\n     alpha = (0.95,0.99))\n\nCompute the partial auto-correlation for an univariate series.\n\nThere are two versions; the \"step\" version estimates the auto-regressive parameters of an increasing model, the \"real\" version estimates the actual partial auto-correlation by eliminating the linear information provided by the lags. When using the default type \"stepwise-real\" both versions are calculated.\n\nThe distribution used to estimate the confidence intervals is an approximation of a Fisher Transformation via a Normal Distribution. There is a plot recipe for the returned object.\n\nArguments\n\nx: Vector or uni-dimensional DataFrame of data.\ntype = Valid values are \"stepwise\", \"real\" and \"stepwise-real\".\nlag: Maximum number of lags.\nalpha: A tuple with two thresholds (t1,t2) with t1 <= t2 to plot confidence intervals. The default values are 0.95 and 0.99.\n\nReturns\n\nA CCF object\n\nExamples\n\njulia> x = rand(100);\nres = pacf(x);\nplot(res)\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.quakes-Tuple{}","page":"Docstrings","title":"Forecast.quakes","text":"Package: Forecast\n\nquakes()\n\nReturn the number of earthquakes per year on earth with a magnitude higher or equal to six from 1950 to 2020. The data has been collected from https://earthquake.usgs.gov/ and aggregated.\n\nExamples\n\njulia> quakes()\n71×2 DataFrame\n Row │ year        quakes \n     │ Date        Int64  \n─────┼────────────────────\n   1 │ 1950-01-01     138\n   2 │ 1951-01-01     151\n   3 │ 1952-01-01     181\n   [...]\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.seaborne","page":"Docstrings","title":"Forecast.seaborne","text":"Package: Forecast\n\nseaborne(full = false)\n\nReturn estimates of world seaborne trade from AIS data collected by Marine Traffic.\n\nBy default a DataFrame containing deadweight imports for France, Germany and the United Kingdom from 2015-04-01 to 2021-05-02 is returned, otherwise a DataFrame is returned for the same countries with import and exports for the below fields:\n\nnumpc:     number of port calls mtc:        metric tons of cargo dwt:        deadweight tonnage suffixma:  30-day moving averages\n\nData available at UN COMTRADE Monitor.Cerdeiro, Komaromi, Liu and Saeed (2020). \n\nReturns\n\nDataframe containing the seaborne dataset.\n\nExamples\n\njulia> seaborne()\n[ Info: Seaborne deadweight trade imports from AIS\n2199×4 DataFrame\n  Row │ Date        France   Germany  UK     \n      │ Date        Int64    Int64    Int64  \n──────┼──────────────────────────────────────\n    1 │ 2015-04-01   507946   878377  599573\n    2 │ 2015-04-02   332043  1501614  772714\n    3 │ 2015-04-03   810077   941663  262994\n   [...]\n\n\n\n\n\n","category":"function"},{"location":"man/docstrings/#Forecast.setnames!-Tuple{Forecast.FORECAST, Vector{String}}","page":"Docstrings","title":"Forecast.setnames!","text":"Rename data in FORECAST object\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.sma-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Number","page":"Docstrings","title":"Forecast.sma","text":"Package: Forecast\n\nsma(x, n)\nsma(x, n, center)\n\nSmooth a vector of data using a simple moving average.\n\nArguments\n\nx: Vector of data.\nn: Size of the moving average.\ncenter: if true centers the moving averaged values in the response padding with missing values, otherwise the padding takes place at the end.\n\nReturns\n\nVector of moving average smoothed values containing missing values to preserve the size of the original vector.\n\nExamples\n\njulia> sma(1:5,3,true)\n5-element Array{Any,1}:\n  missing\n 2.0\n 3.0\n 4.0\n  missing\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.splot-Tuple{}","page":"Docstrings","title":"Forecast.splot","text":"Package: Forecast\n\nsplot(x, labels)\n\nPlot a seasonal plot of x considering the parameter labels\n\nArguments\n\nx: regular timed observations\nlabels: This parameter accepts Integer, String and Vector values. When an Integer the labels are 1:labels, when a Vector the labels are specified within and when a String it accepts values \"month\", \"day\" and \"quarter\" expecting the first value of x to fall in \"Jan\", \"Mon\" or \"Q1\" unless x is a DataFrame in which case it is treated as a Time Series where the first Date typed column and value columns ares considered, observations are then automatically ordered either by \"month\", \"day\" or \"quarter\" and labels may be use to rename the default values.\n\nReturns\n\nSesonal plot\n\nExamples\n\njulia> splot(rand(120),\"month\")\njulia> splot(rand(120),\"quarter\")\njulia> splot(rand(120),\"day\")\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.stl-Tuple{DataFrames.DataFrame, Integer}","page":"Docstrings","title":"Forecast.stl","text":"Package: Forecast\n\nstl(Yv, np; robust=false, \n            nl=nextodd(np), \n            ns=10*length(Yv)+1,\n            nt=nextodd(1.5*np/(1-1.5/ns)), \n            ni=robust ? 1 : 2,\n            no=0,\n            spm=false,\n            qsmp=max(div(np,7),2),\n            cth = 0.01,\n            timestamp = nothing,\n            verbose=false)\n\nDecompose a time series into trend, seasonal, and remainder components.\n\n\"STL has a simple design that consists of a sequence of applications of the loess smoother; the simplicity allows analysis of the properties of the procedure and allows fast computation, even for very long time series and large amounts of trend and seasonal smoothing. Other features of STL  are specification of amounts of seasonal and trend smoothing that range, in a nearly continous way, from very small amount of smoothing to a very large amount; robust estimates of the trend and seasonal components that are not distorted by aberrant behavior in the data; specification of the period of the seasonal component to any intenger multiple of the time sampling interval greater than one; and the ability to decompose time series with missing values.\"*\n\nAll default values are chosen following the recommendations of the original paper when those were recommended. ns is recommended to be chosen of the basis of knowledge of the time series and on the basis of diagnostic methods; it must nonethelessbe  always odd and at least 7. A default value is not advised on the original paper, instead the same default value used in the stl implementation in R in usere here.\n\nfor no the authors advise 5 (\"safe value\") or 10 (\"near certainty of convergence\") cycles  or a convergence criterion when robustness is required, in this case when robust is true computations stop when convergence is achieved in trend and seasonality.\n\nfor qsmp the authors do not adivise a default but they use a value close to div(np,7).\n\nArguments\n\nnp: Seasonality.\nrobust: Robust stl.\nnl: Smoothing parameter of the low-pass filter.\nns: Smoothing parameter for the seasonal component.\nnt: Smoothing parameter for the trend decomposition.\nni: Number of inner loop cycles.\nno: Number of outer loop cycles.\nspm: Seasonal post-smoothing.\nqsmp: Loess q window for Seasonal post-smoothing.\ncth: Corvengence threshold for Seasonal and Trend.\ntimestamp: Timestamp to be used other than the default.\nverbose: If true shows updates for the Seasonal and Trend convergence.\n\nReturns\n\nAn STL object with the seasonal, trend and remainder components.\n\nSTL: A Seasonal, Trend Decomposition Procedure Based on Loess\" Robert B. Cleveland, William S. Cleveland, Jean E. McRae, and Irma Terpenning. Journal of Official Statistics Vol. 6. No. 1, 1990, pp. 3-73 (c) Statistics Sweden.\n\nExamples\n\njulia> stl_co2 = stl(co2(),365; robust=true, spm=true)\n[ Info: Dataset used in Cleveland et al. paper\n[ Info: Corvengence achieved (< 0.01); Stopping computation...\nSTL Object: stl(Yn, np=365; nl=365, ns=46091, nt=549, ni=1, no=0, spm=true, qsmp=52)\n\njulia> plot(stl_co2)\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.summarize-Tuple{DataFrames.DataFrame}","page":"Docstrings","title":"Forecast.summarize","text":"Package: Forecast\n\nsummarize(x; varnames = nothing)\n\nReturn statistical summary for x\n\nThe values returned are dividen in three sections, the first one shows Minimum, 1st Quantile, Median, Mean, 3rd Quantile, Maxixum and the p-value for the Jarque-Bera Normality Test. The second one show the first four moment; Mean, Variance, Skewness and Kurtosis, an finally a summary with the different types contained in the Array.\n\nArguments\n\nx: Array or DataFrame of data.\nvarnames: Names for the columns to be summarized, it defaults to automatic naming           or the existing names in when a DataFrame.\n\nReturns\n\nA SUMMARIZE struct\n\nExamples\n\njulia> summarize(rand(100,3); varnames = [\"a\",\"b\",\"c\"])\n┌──────────┬────────────┬──────────┬──────────┬──────────┬──────────┬──────────┬───────────┐\n│ Variable │        Min │       1Q │   Median │     Mean │       3Q │      Max │ H0 Normal │\n├──────────┼────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│        a │ 0.00520465 │ 0.205712 │ 0.462199 │ 0.465784 │   0.6913 │  0.97946 │ 0.0593599 │\n│        b │ 0.00218787 │ 0.247344 │ 0.485465 │ 0.498587 │ 0.723371 │ 0.985226 │ 0.0562301 │\n│        c │  0.0244256 │ 0.247598 │ 0.530821 │ 0.498689 │ 0.722731 │ 0.967952 │ 0.0356495 │\n└──────────┴────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴───────────┘\n┌──────────┬──────────┬───────────┬───────────┬───────────┐\n│ Variable │     Mean │  Variance │  Skewness │  Kurtosis │\n├──────────┼──────────┼───────────┼───────────┼───────────┤\n│        a │ 0.465784 │ 0.0823949 │ 0.0823949 │ 0.0823949 │\n│        b │ 0.498587 │ 0.0854883 │ 0.0854883 │ 0.0854883 │\n│        c │ 0.498689 │ 0.0790597 │ 0.0790597 │ 0.0790597 │\n└──────────┴──────────┴───────────┴───────────┴───────────┘\n┌──────────┬─────────┐\n│ Variable │ Float64 │\n├──────────┼─────────┤\n│        a │     100 │\n│        b │     100 │\n│        c │     100 │\n└──────────┴─────────┘\n\n\n\n\n\n","category":"method"},{"location":"man/docstrings/#Forecast.transform","page":"Docstrings","title":"Forecast.transform","text":"Transform a FORECAST object value with given function\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#Featured-Methods","page":"Featured Methods","title":"Featured Methods","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"acf:        Auto-correlation or auto-covariance of univariate series. \nar:         Multivariate Autoregressive Model.\narsim:      Simulated Multivariate Autoregressive Model.\nccf:        Cross-correlation or cros-covariance of two univariate series.\nd:          Lagged differences of a given order for Vector and Array\nforecast:   Forecast values of fitted time series models.\nhma:        Henderson moving average filter.\nloess:      Locally estimated scatterplot smoothing.\np:          Reverse lagged differences of a given order for types Vector and Array.\npacf:       Partial Auto-correlation function.\nsma:        Simple moving average.\nsplot:      Plot a seasonal plot for types Vector and TimeArray.\nstl:        Seasonal and Trend decomposition using loess.\nsummarize:  Statistical summary.","category":"page"},{"location":"man/methods/#acf","page":"Featured Methods","title":"acf","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Auto-correlation/covariance function","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"acf","category":"page"},{"location":"man/methods/#Forecast.acf","page":"Featured Methods","title":"Forecast.acf","text":"Package: Forecast\n\nacf(x::{AbstractVector,DataFrame},\n    type = \"cor\",\n    lag = Integer(ceil(10*log10(length(x)))),\n    alpha = (0.95,0.99))\n\nCompute the auto-correlation or auto-covariance for an univariate series.\n\nThe results are normalized to preserve homoscedasticity. The distribution used to normalize the data is an approximation of a Fisher Transformation via a Normal Distribution. There is a plot recipe for the returned object, if the type is cor the plot will also show confidence intervals for the given alpha values.\n\nArguments\n\nx: Vector or uni-dimensional DataFrame of data.\ntype: Valid values are \"cor\" for correlation (default) and \"cov\" for convariance.\nlag: Maximum number of lags.\nalpha: A tuple with two thresholds (t1,t2) with t1 <= t2 to plot confidence intervals. The default values are 0.95 and 0.99.\n\nReturns\n\nA CCF object.\n\nExamples\n\njulia> x = rand(100);\nres = acf(x; type=\"cor\");\nplot(res)\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#ar","page":"Featured Methods","title":"ar","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Autoregressive model","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"ar","category":"page"},{"location":"man/methods/#Forecast.ar","page":"Featured Methods","title":"Forecast.ar","text":"Package: Forecast\n\nar(x::DataFrame, or, constant = true;             \n                 alpha = 1.0, dΦ0 = nothing, dΦ = nothing)\n\nar(x::AbstractArray, or, constant = true; \n                     alpha = false, dΦ0 = nothing, dΦ = nothing, varnames = nothing)\n\nFit a multivariate autoregressive series model.\n\nThe fitting is done via Ordinary Least Squared and implements the following model:\n\nXt = Phi_0 + sum_i=1^p Phi_i cdot X_t-i + mathcalN(vec0Sigma)\n\nArguments\n\nx: Multivariate series each column containing a dimension and ordered by time ascending rows.\nor: Number of parameters Φ to be estimated.\nconstant: If true ar estimates Φ0 otherwise it is assume to be zero.\nalpha: fixes to zero all coefficients which significance is below its value. It defaults to one.\ndΦ0: Tuple containing two Φ0 objects, the first one will act as an original reference to the second one and different values will be fixed in the fitting process to the values in the second Φ0.\ndΦ:  Equivalent to dΦ0 but for Φ.\nvarnames: Names of the dimensions (by default xi where i is an integer)\n\nReturns\n\nAn AR object containing the model coefficients, the error sigma matrix, residuals and a collection of information criteria\n\nExamples\n\n```julia-repl julia> ar(rand(100,2),2) AR([...])\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#arsim","page":"Featured Methods","title":"arsim","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Autoregressive simulation","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"arsim","category":"page"},{"location":"man/methods/#Forecast.arsim","page":"Featured Methods","title":"Forecast.arsim","text":"Package: Forecast\n\narsim(Φ,Φ0,x0,n; Σ,E,fix)\narsim(AR,n;fix)\n\nSimulate a multivariate autoregressive series model.\n\nThe simulated series follows the model:\n\nXt = Phi_0 + sum_i=1^p Phi_i cdot X_t-i + E\n\nArguments\n\nAR:           AR struct coming from an ar model.\nΦ:            Array with dimensions (m,m,p) for the parameters in the AR model.\nΦ0:           Vector size m for the constant in the AR model. Default value is 0.\nx0:           Array with dimensions (m,p) for the initial value in the AR model. Default value is a random value from zero to one.\nn:            Number of simulations.\nfix:          Matrix{Union{Missing,Float64}} containing values to be fixed in th simulation.\nΣ2:           Variance Covariance matrix for the AR model with a MvNormal distribution for the noise. Default value is an identity Matrix.\nE:            Distribution for the error.\n\nReturns\n\nA multivariate series simulating an AR model each column containing a dimension and ordered by time ascending rows.\n\nExamples\n\n```julia-repl julia> arsim(1,1,1,10) 10-element Vector{Float64,1}: [...]\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#boxcox","page":"Featured Methods","title":"boxcox","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Autoregressive simulation","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"boxcox","category":"page"},{"location":"man/methods/#Forecast.boxcox","page":"Featured Methods","title":"Forecast.boxcox","text":"Package: Forecast\n\nboxcox(x::Vector)\nboxcox(x::Vector, λ::Float64)  \nboxcox(x::Vector, λ::Vector)\n\nCompute a Box-Cox power transformation given λ or (λ1,λ2) for data containing negative values, or compute an optimal power transformation if no λ or (λ1,λ2) is provided.\n\nx(lambda) =\nbegincases\n dfracx_i^lambda - 1lambda  textif  lambda neq 0 \n ln x_i  textif  lambda = 0\nendcases\n\nfor negative values\n\nx(boldsymbollambda) =\nbegincases\n dfrac(x_i + lambda_2)^lambda_1 - 1lambda_1  textif  lambda_1 neq 0 \n ln (x_i + lambda_2)  textif  lambda_1 = 0\nendcases \n\nArguments\n\nx: Vector to be transformed.\nλ: Exponent/s for the tranformation\n\nReturns\n\nA vector with a boxcox tarnsformation for x or a Dict with :x boxcox tranformed and the optimal :λ\n\nReference\n\nBox, G. E. P. and Cox, D. R. (1964). An analysis of transformations, Journal of the Royal Statistical Society, Series B, 26, 211-252. A\n\nExamples\n\njulia> x = rand(100)\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\njulia> x = rand(100) .- 0.5\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#ccf","page":"Featured Methods","title":"ccf","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Cros-correlation/covariance function","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"ccf","category":"page"},{"location":"man/methods/#Forecast.ccf","page":"Featured Methods","title":"Forecast.ccf","text":"Package: Forecast\n\nccf(x1::{AbstractVector,DataFrame},\n    x2::{AbstractVector,DataFrame};\n    type = \"cor\",\n    lag = Integer(ceil(10*log10(length(x1)))),\n    alpha = (0.95,0.99))\n\nCompute the cross-correlation or cros-covariance of two univariate series.\n\nThe results are normalized to preserve homoscedasticity. The distribution used to normalize the data is an approximation of a Fisher Transformation via a Normal Distribution. There is a plot recipe for the returned object, if the type is cor the plot will also show confidence intervals for the given alpha values.\n\nIf, for a given integer k, x2 repeats x1 values such that x1[t] = x2[t+k] for all i then high correlation value will be placed at the right from the center in the results. That is, this convention will be represented in the plots as x1_t = x2_{t+k} -> _____0__k__ meaning x2 behavior can be predicted by x1 in k units.\n\nArguments\n\nx1: Vector or uni-dimensional DataFrame of data.\nx2: Vector or uni-dimensional DataFrame of data.\ntype: Valid values are \"cor\" for correlation (default) and \"cov\" for convariance.\nlag: Maximum number of lags.\nalpha: A tuple with two thresholds (t1,t2) with t1 <= t2 to plot confidence intervals. The default values are 0.95 and 0.99.\n\nReturns\n\nA CCF object. \n\nExamples\n\njulia> x1 = rand(100);\nx2 = circshift(x1,6);\nres = ccf(x1, x2; type=\"cor\");\nplot(res)\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#d","page":"Featured Methods","title":"d","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Lagged differences of a given order","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"d","category":"page"},{"location":"man/methods/#Forecast.d","page":"Featured Methods","title":"Forecast.d","text":"Package: Forecast\n\nfunction d(x::{AbstractVector,AbstractArray,DataFrame},\n           or::Int=1,\n           la::Int=1;\n           center::Bool=false)\n\nReturn Laged differences of a given or for Vector, Array and TimeSeries.\n\nArguments\n\nx: Vector or Array of data.\nor: Order of the differences; number of recursive iterations on the same vector/array.\nla: Lag for the difference.\ncenter: Center the result in the response using Missing values.\n\nReturns\n\nLaged differences Vector or Array of a given order.\n\nExamples\n\njulia> x = [1,2,3,4,5];\njulia> d(x)\n d(x)\n4-element Vector{Int64}:\n 1\n 1\n 1\n 1\n\njulia> d(x,2)\n3-element Vector{Int64}:\n 0\n 0\n 0\n\n\njulia> d(x,1,2)\n3-element Vector{Int64}:\n 2\n 2\n 2\n\njulia> x = reshape(collect(1:20),10,2);\n\njulia> d(x,2,2)\n6×2 Matrix{Int64}:\n 0  0\n 0  0\n 0  0\n 0  0\n 0  0\n 0  0\n\njulia> d(d(x,1,2),1,2) == d(x,2,2)\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#forecast","page":"Featured Methods","title":"forecast","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Forecast for models","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"forecast","category":"page"},{"location":"man/methods/#Forecast.forecast","page":"Featured Methods","title":"Forecast.forecast","text":"Package: Forecast\n\nforecast(xar, n; levels = (0.8,.95))\n\nForecast a univariate or multivariate autoregressive model.\n\nThe forecasting follows the model:\n\nXt = Phi_0 + sum_i=1^p Phi_i cdot X_t-i + E\n\nArguments\n\nxar           AR struct coming from the ar function. n             Number of time periods to be forecasted. alpha         Prediction intervals levels; its default value is (0.8, 0.95) fixMean       Fixes the mean in the forecast with Matrix{Union{Missing,Float64}}. Default value sis nothing. fixΣ2         fixes Σ2 values in the forecast\n\nReturns\n\nA FORECAST struct\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#iboxcox","page":"Featured Methods","title":"iboxcox","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Autoregressive simulation","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"iboxcox","category":"page"},{"location":"man/methods/#Forecast.iboxcox","page":"Featured Methods","title":"Forecast.iboxcox","text":"Package: Forecast\n\niboxcox(x::Vector, λ::Float64) \niboxcox(x::Vector, λ::Vector)\n\nCompute the inverse transformation of a Box-Cox power transformation given λ.\n\nArguments\n\nx: Vector with a boxcox tranformation to be inverted.\nλ: Exponent for the inverse tranformation.\n\nReturns\n\nA vector with witht the inverse transformation of x given λ.\n\nReference\n\nBox, G. E. P. and Cox, D. R. (1964). An analysis of transformations, Journal of the Royal Statistical Society, Series B, 26, 211-252. A\n\nExamples\n\njulia> x = rand(100)\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\njulia> x = rand(100) .- 0.5\njulia> bc = boxcox(x)\njulia> iboxcox(bc[:x],bc[:λ]) ≈ x\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#loess","page":"Featured Methods","title":"loess","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Locally Estimated Scatterplot Smoothing (LOESS)","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"loess","category":"page"},{"location":"man/methods/#Forecast.loess","page":"Featured Methods","title":"Forecast.loess","text":"Package: Forecast\n\nloess(xv, yv;\n      d = 2,\n      q = Int64(round(3/4*length(xv))),\n      rho = repeat([1.0],inner=length(xv)),  \n      predict = xv)\n\nSmooth a vector of observations using locally weighted regressions.\n\nAlthough loess can be used to smooth observations for any given number of independent variables, this implementation is univariate. The speed of loess can be greatly increased by using fast aproximations for the linear fitting calculations, however this implementation calculates only exact results.\n\nThe loess functionality and nomenclature follows the descriptions in:\n\n\"STL: A Seasonal, Trend Decomposition Procedure Based on Loess\" Robert B. Cleveland, William S. Cleveland, Jean E. McRae, and Irma Terpenning. Journal of Official Statistics Vol. 6. No. 1, 1990, pp. 3-73 (c) Statistics Sweden.\n\nArguments\n\nxv: Observations' support.\nyv: Observation values.\nd: Degree of the linear fit, it accepts values 1 or 2.\nq: As q increases loess becomes smoother, when q tends to infinity loess tends to an ordinary least square poynomial fit of degree d. It defaults to the rounding of 3/4 of xv's length.\nrho: Weights expressing the reliability of the observations (e.g. if yi had variances σ^2*ki where ki where known, the rhoi could be 1/ki). It defaults to 1.0.\npredict: Vector containing the real values to be predicted, by default predicts xv.\n\nReturns\n\nThe loess values for the values contained in predict.\n\nExamples\n\njulia> loess(rand(5), rand(5); predict=rand(10))\n10-element Array{Float64,1}:\n[...]\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#p","page":"Featured Methods","title":"p","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Inverse lagged differences of a given order","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"p","category":"page"},{"location":"man/methods/#Forecast.p","page":"Featured Methods","title":"Forecast.p","text":"Package: Forecast\n\nfunction p(dx, x0)\n\nReturn reverse lagged differences of a given order for Vector, Array and DataFrame.\n\nArguments\n\ndx: Array or DataFrame of data.\nx0: Initial constants the reverse difference. The default value represents an integration of order one and lag one with initial values at zero. The format for the initial values is Array{Real,3}(order, variable, lag)\"\n\nReturns\n\nLagged differences Vector or Array of a given order.\n\nExamples\n\n\n# Order two with Lag two\njulia> x = repeat(1:2,30);\njulia> dx = d(x,2,2);\njulia> x0 = zeros(2,1,2); # lag 2, 1 variable, order 1\njulia> x0[1,:,:] = collect(1:2);\njulia> p(dx,x0) ≈ x\ntrue\n\n# Calculation of π\njulia> x = 0:0.001:1;\njulia> y = sqrt.(1 .- x.^2);\njulia> isapprox(4*p(y)[end]/1000 , π, atol = 0.01)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#splot","page":"Featured Methods","title":"splot","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"splot","category":"page"},{"location":"man/methods/#Forecast.splot","page":"Featured Methods","title":"Forecast.splot","text":"Package: Forecast\n\nsplot(x, labels)\n\nPlot a seasonal plot of x considering the parameter labels\n\nArguments\n\nx: regular timed observations\nlabels: This parameter accepts Integer, String and Vector values. When an Integer the labels are 1:labels, when a Vector the labels are specified within and when a String it accepts values \"month\", \"day\" and \"quarter\" expecting the first value of x to fall in \"Jan\", \"Mon\" or \"Q1\" unless x is a DataFrame in which case it is treated as a Time Series where the first Date typed column and value columns ares considered, observations are then automatically ordered either by \"month\", \"day\" or \"quarter\" and labels may be use to rename the default values.\n\nReturns\n\nSesonal plot\n\nExamples\n\njulia> splot(rand(120),\"month\")\njulia> splot(rand(120),\"quarter\")\njulia> splot(rand(120),\"day\")\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#stl","page":"Featured Methods","title":"stl","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Seasonal and Trend decomposition based on Loess","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"stl","category":"page"},{"location":"man/methods/#Forecast.stl","page":"Featured Methods","title":"Forecast.stl","text":"Package: Forecast\n\nstl(Yv, np; robust=false, \n            nl=nextodd(np), \n            ns=10*length(Yv)+1,\n            nt=nextodd(1.5*np/(1-1.5/ns)), \n            ni=robust ? 1 : 2,\n            no=0,\n            spm=false,\n            qsmp=max(div(np,7),2),\n            cth = 0.01,\n            timestamp = nothing,\n            verbose=false)\n\nDecompose a time series into trend, seasonal, and remainder components.\n\n\"STL has a simple design that consists of a sequence of applications of the loess smoother; the simplicity allows analysis of the properties of the procedure and allows fast computation, even for very long time series and large amounts of trend and seasonal smoothing. Other features of STL  are specification of amounts of seasonal and trend smoothing that range, in a nearly continous way, from very small amount of smoothing to a very large amount; robust estimates of the trend and seasonal components that are not distorted by aberrant behavior in the data; specification of the period of the seasonal component to any intenger multiple of the time sampling interval greater than one; and the ability to decompose time series with missing values.\"*\n\nAll default values are chosen following the recommendations of the original paper when those were recommended. ns is recommended to be chosen of the basis of knowledge of the time series and on the basis of diagnostic methods; it must nonethelessbe  always odd and at least 7. A default value is not advised on the original paper, instead the same default value used in the stl implementation in R in usere here.\n\nfor no the authors advise 5 (\"safe value\") or 10 (\"near certainty of convergence\") cycles  or a convergence criterion when robustness is required, in this case when robust is true computations stop when convergence is achieved in trend and seasonality.\n\nfor qsmp the authors do not adivise a default but they use a value close to div(np,7).\n\nArguments\n\nnp: Seasonality.\nrobust: Robust stl.\nnl: Smoothing parameter of the low-pass filter.\nns: Smoothing parameter for the seasonal component.\nnt: Smoothing parameter for the trend decomposition.\nni: Number of inner loop cycles.\nno: Number of outer loop cycles.\nspm: Seasonal post-smoothing.\nqsmp: Loess q window for Seasonal post-smoothing.\ncth: Corvengence threshold for Seasonal and Trend.\ntimestamp: Timestamp to be used other than the default.\nverbose: If true shows updates for the Seasonal and Trend convergence.\n\nReturns\n\nAn STL object with the seasonal, trend and remainder components.\n\nSTL: A Seasonal, Trend Decomposition Procedure Based on Loess\" Robert B. Cleveland, William S. Cleveland, Jean E. McRae, and Irma Terpenning. Journal of Official Statistics Vol. 6. No. 1, 1990, pp. 3-73 (c) Statistics Sweden.\n\nExamples\n\njulia> stl_co2 = stl(co2(),365; robust=true, spm=true)\n[ Info: Dataset used in Cleveland et al. paper\n[ Info: Corvengence achieved (< 0.01); Stopping computation...\nSTL Object: stl(Yn, np=365; nl=365, ns=46091, nt=549, ni=1, no=0, spm=true, qsmp=52)\n\njulia> plot(stl_co2)\n\n\n\n\n\n","category":"function"},{"location":"man/methods/#summarize","page":"Featured Methods","title":"summarize","text":"","category":"section"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"Statistical summary","category":"page"},{"location":"man/methods/","page":"Featured Methods","title":"Featured Methods","text":"summarize","category":"page"},{"location":"man/methods/#Forecast.summarize","page":"Featured Methods","title":"Forecast.summarize","text":"Package: Forecast\n\nsummarize(x; varnames = nothing)\n\nReturn statistical summary for x\n\nThe values returned are dividen in three sections, the first one shows Minimum, 1st Quantile, Median, Mean, 3rd Quantile, Maxixum and the p-value for the Jarque-Bera Normality Test. The second one show the first four moment; Mean, Variance, Skewness and Kurtosis, an finally a summary with the different types contained in the Array.\n\nArguments\n\nx: Array or DataFrame of data.\nvarnames: Names for the columns to be summarized, it defaults to automatic naming           or the existing names in when a DataFrame.\n\nReturns\n\nA SUMMARIZE struct\n\nExamples\n\njulia> summarize(rand(100,3); varnames = [\"a\",\"b\",\"c\"])\n┌──────────┬────────────┬──────────┬──────────┬──────────┬──────────┬──────────┬───────────┐\n│ Variable │        Min │       1Q │   Median │     Mean │       3Q │      Max │ H0 Normal │\n├──────────┼────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│        a │ 0.00520465 │ 0.205712 │ 0.462199 │ 0.465784 │   0.6913 │  0.97946 │ 0.0593599 │\n│        b │ 0.00218787 │ 0.247344 │ 0.485465 │ 0.498587 │ 0.723371 │ 0.985226 │ 0.0562301 │\n│        c │  0.0244256 │ 0.247598 │ 0.530821 │ 0.498689 │ 0.722731 │ 0.967952 │ 0.0356495 │\n└──────────┴────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴───────────┘\n┌──────────┬──────────┬───────────┬───────────┬───────────┐\n│ Variable │     Mean │  Variance │  Skewness │  Kurtosis │\n├──────────┼──────────┼───────────┼───────────┼───────────┤\n│        a │ 0.465784 │ 0.0823949 │ 0.0823949 │ 0.0823949 │\n│        b │ 0.498587 │ 0.0854883 │ 0.0854883 │ 0.0854883 │\n│        c │ 0.498689 │ 0.0790597 │ 0.0790597 │ 0.0790597 │\n└──────────┴──────────┴───────────┴───────────┴───────────┘\n┌──────────┬─────────┐\n│ Variable │ Float64 │\n├──────────┼─────────┤\n│        a │     100 │\n│        b │     100 │\n│        c │     100 │\n└──────────┴─────────┘\n\n\n\n\n\n","category":"function"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"using Forecast\nusing DataFrames\nusing Plots; gr()\nPlots.reset_defaults()\ndefault(size=(800,500))","category":"page"},{"location":"man/examples/airpassengers/#Air-Passengers-(Seasonality)","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"","category":"section"},{"location":"man/examples/airpassengers/#Introduction","page":"Air Passengers (Seasonality)","title":"Introduction","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"In this example we will predict the monthly totals in thounsads of international airline passengers with data from 1949 to 1960.","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"plot(air()) #hide","category":"page"},{"location":"man/examples/airpassengers/#Descriptive-Analysis-and-Transformations","page":"Air Passengers (Seasonality)","title":"Descriptive Analysis & Transformations","text":"","category":"section"},{"location":"man/examples/airpassengers/#Heteroskedasticity","page":"Air Passengers (Seasonality)","title":"Heteroskedasticity","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"A cople of  obvious feature in the plot of the data is that it shows an non-stationary heteroskedastic time series. However, to facilitate the fitting of an AR model we want a Stationary Homoskedastic time series. With that goal in mind we could consider first a boxcox transformation to deal with the heteroskedasticity but in this case a simple log transformation works just fine.","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"log_ap = air()\nlog_ap.Passengers = log.(log_ap.Passengers)\nrename!(log_ap, :Passengers => :LogPassengers)\nplot(log_ap) #hide","category":"page"},{"location":"man/examples/airpassengers/#Stationary-Behavior","page":"Air Passengers (Seasonality)","title":"Stationary Behavior","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"We still have a clear non-stationary time series displaying a marked trend and montnly seasonality.","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"stl_ap = stl(log_ap.LogPassengers,12,robust=true)\nplot(stl_ap)","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"To faciliate the fitting of an AR model we want an stationary time series, and in order to have one we will be using a differentation of order 12 for the trend and seasonality.","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"d12_log_ap = d(log_ap,1,12)\nplot(d12_log_ap) # hide","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"There is a case for second differentation of oder one since it furthers reduces the variance of the resulting time series indicating a potential remaining trend, however this potential improvement might not be enough to justify this new transformation since the existing one offers now a good enough stationary time series to consider an AR model with a constant coefficient.","category":"page"},{"location":"man/examples/airpassengers/#Evaluating-Seasonal-Differentation","page":"Air Passengers (Seasonality)","title":"Evaluating Seasonal Differentation","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"splot(d12_log_ap)","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"After a differentation of order 12 we can also see that the seasonality has mostly disappeared and we can continue our analysis with a reasonalble stationary dataset.","category":"page"},{"location":"man/examples/airpassengers/#Autoregressive-Behavior","page":"Air Passengers (Seasonality)","title":"Autoregressive Behavior","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"plot(pacf(d12_log_ap[:,2]))","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"We can see clear auto-correlations with values of the previous two months and with values of the same months in the previous year. Beyond this there seems to be not enough correlation to justify a more complex model, but we can always check this hypothesis lookig at the Information Criteria.","category":"page"},{"location":"man/examples/airpassengers/#Fitting-an-AR-model","page":"Air Passengers (Seasonality)","title":"Fitting an AR model","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"Let's then fit a AR with 13 parameters with a constant despite being differentiated and see how it looks:","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"ar_tap = ar(d12_log_ap,13)\nshow(ar_tap) # hide","category":"page"},{"location":"man/examples/airpassengers/#Fixing-Coefficients","page":"Air Passengers (Seasonality)","title":"Fixing Coefficients","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"As expected we see that Phi1Phi2Phi12 and Phi13 have highly significant coefficients, also we can see some significance in Phi0. This confirms the case for a further differentation of order one however, since doing so decreases the normality profile of the residuals we will keep it as it is.","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"Since we want to know the falues of these four parameters without the influcence of the rest we will now fit again the model fixing all coefficients except those five.","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"Φ = ar_tap.Φ\nfΦ = copy(ar_tap.Φ)\nfΦ[3:11] .= 0 # fixing coefficients from 3 to 11 to zero.\ndΦ = (Φ,fΦ)   # Tuple informing AR which coefficients to fix.\narf_tap = ar(d12_log_ap,13;dΦ)\nshow(arf_tap) # hide","category":"page"},{"location":"man/examples/airpassengers/#Forecast-of-Transformed-Series","page":"Air Passengers (Seasonality)","title":"Forecast of Transformed Series","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"fct = forecast(arf_tap,3*12)\nplot(fct)","category":"page"},{"location":"man/examples/airpassengers/#Forecast-Original-Data","page":"Air Passengers (Seasonality)","title":"Forecast Original Data","text":"","category":"section"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"x0 = reshape(log_ap[:,2][1:12]',1,1,12)\nfct2 = p(fct,x0)\nfc = Forecast.transform(fct2,exp)\nnew_names = [\"#Passengers\"]\nsetnames!(fc,new_names)\nplot(fc, title = \"Forecast Air Passengers\")","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"And the forecasted values in their prediction intervals for the next three years are:","category":"page"},{"location":"man/examples/airpassengers/","page":"Air Passengers (Seasonality)","title":"Air Passengers (Seasonality)","text":"show(fc) # hide","category":"page"},{"location":"","page":"What is this about?","title":"What is this about?","text":"CurrentModule = Forecast","category":"page"},{"location":"#What-is-this-about?","page":"What is this about?","title":"What is this about?","text":"","category":"section"},{"location":"","page":"What is this about?","title":"What is this about?","text":"It's about time","category":"page"},{"location":"","page":"What is this about?","title":"What is this about?","text":"Julia package containing utilities intended for Time Series analysis.","category":"page"},{"location":"","page":"What is this about?","title":"What is this about?","text":"Warning: This package is under development and its functionality has not been thoroughly tested. Please, consider to report issues if you find any.","category":"page"},{"location":"#Featured-Methods","page":"What is this about?","title":"Featured Methods","text":"","category":"section"},{"location":"","page":"What is this about?","title":"What is this about?","text":"acf:        Auto-correlation or auto-covariance of univariate series. \nar:         Multivariate Autoregressive Model.\narsim:      Simulated Multivariate Autoregressive Model.\nboxcox:     Box-Cox transformation.\nccf:        Cross-correlation or cros-covariance of two univariate series.\nd:          Lagged differences of a given order.\nforecast:   Forecast values of fitted time series models.\nhma:        Henderson moving average filter.\niboxcox:    Inverse Box-Cox transformation.\nloess:      Locally estimated scatterplot smoothing.\np:          Reverse lagged differences of a given order.\npacf:       Partial Auto-correlation function.\nsma:        Simple moving average.\nsplot:      Plot a seasonal plot.\nstl:        Seasonal and Trend decomposition using loess.\nsummarize:  Statistical summary.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots; gr()\nPlots.reset_defaults()\ndefault(size=(800,500))","category":"page"},{"location":"man/quickstart/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"man/quickstart/#Installing-Forecast.jl","page":"Quick Start","title":"Installing Forecast.jl","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"To begin exploring the package functionality type the lines below in the Julia REPL:","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Pkg> add https://github.com/viraltux/Forecast.jl\n\njulia> using Forecast","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Alternatively you can also type:","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"julia> using Pkg\n\njulia> Pkg.add(url=\"https://github.com/viraltux/Forecast.jl\")\n\njulia> using Forecast","category":"page"},{"location":"man/quickstart/#LOESS-extrapolated","page":"Quick Start","title":"LOESS extrapolated","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"The example below compares LOESS result with extrapolated predictions compared to a simple moving average result with a window size of 100.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\n\nn = 1000\naxb = LinRange(-1/2,pi+1/2,n)\nx = LinRange(0,pi,n)\ny = sin.(x) .+ rand(n)\nscatter(x, y, xlims=(-1/2,pi+1/2), ma=.5, label = \"Data\", color = :grey)\nplot!(axb,loess(x,y,predict=axb), linewidth = 4, label = \"LOESS\", color = :blue)\nplot!(x,sma(y,100,true), linewidth = 2, label= \"Moving Avg 100\", color = :orange)","category":"page"},{"location":"man/quickstart/#STL-on-CO2-dataset","page":"Quick Start","title":"STL on CO2 dataset","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"For this example we will be using the co2 data used by the creators of STL to demostrate its funcitonality, below we can see such time series.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\n\nplot(co2(), legend=:bottomright)","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"The parameters used for STL they're also from the orginal paper, a period of 365 days is used (removing leap years extra day), a robust fit is required and seasonality post-smoothing is applied.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\n\nstl_co2 = stl(co2(),365; robust=true, spm=true)\nplot(stl_co2)","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"The image below comes from the original paper for comparison purposes.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"<img src=\"../../images/stl.png\" width=\"800px\"/>","category":"page"},{"location":"man/quickstart/#Cross-Correlation-on-shifted-dasaset","page":"Quick Start","title":"Cross-Correlation on shifted dasaset","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Here we cross-correlate two identical series shifted by six positions, the plot shows how the peak correlation is at position six.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Random\nusing Forecast\n\nRandom.seed!(36)\nx1 = rand(100)\nx2 = circshift(x1,6)\nres = ccf(x1, x2; type=\"cor\")\nplot(res)","category":"page"},{"location":"man/quickstart/#PACF-on-random-dataset","page":"Quick Start","title":"PACF on random dataset","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"The pacf function is useful to identify significant parameters in ARIMA models. For instance, in R the default pacf function estimates partial auto-correlation in a stepwise fashion, however in cases where the model is highly correlated with many previous steps this approach identifies the first lag as highly correlated and the rest as near zeroes when, in reality, all partial auto-correlations should be around zero since that's the information left once taken away the linear influence from the all other lags. Below is an example of such effect where the stepwise (in blue) and real (in red) partial auto-correlations are compared for a series where all lags highly correlate to each other.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Random\nusing Forecast\n\nRandom.seed!(36)\nx = collect(1:100) + rand(100)\nres = pacf(x)\nplot(res)","category":"page"},{"location":"man/quickstart/#Seasonal-Plot-on-Air-Passengers-dataset","page":"Quick Start","title":"Seasonal Plot on Air Passengers dataset","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"To compare seasonal behavior we can use splot to display it side by side, in this case it seems the months of July and August are the ones with a higher number of airflight passengers.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\nsplot(air())","category":"page"},{"location":"man/quickstart/#Autoregressive-Models","page":"Quick Start","title":"Autoregressive Models","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Random Walk simulated, fitted and forecast plotted.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\nplot(forecast(ar(arsim( 1.,0.,0.,100),1,false),100))","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Random Zigzag Walk simulated, fitted and forecast plotted.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\nplot(forecast(ar(arsim(-1.,0.,0.,100),1),10))","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Bivariate dataset simulated, fitted and forecast plotted.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nusing Forecast\n\nΦ = [1 .1;\n    -.2 1]\nΦ0 = [2, 3]\nx0 = [.1, .1]\nΣ2 = [.2 .05;\n     .05 .2]\nar_model = ar(arsim(Φ,Φ0,x0,100;Σ2),1)\nfc = forecast(ar_model,50)\nplot(fc)","category":"page"}]
}
